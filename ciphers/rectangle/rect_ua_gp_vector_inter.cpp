/* This code was generated by Usuba.
   See https://github.com/DadaIsCrazy/usuba.
   From the file "samples/usuba/rectangle_vector.ua" (included below). */

#include <stdint.h>
#include <stdio.h>
#include <stdlib.h>

/* Do NOT change the order of those define/include */
#define NO_RUNTIME
#ifndef BITS_PER_REG
#define BITS_PER_REG 64
#endif
/* including the architecture specific .h */
#include "STD.h"

/* auxiliary functions */
void SubColumn__ (/*inputs*/ DATATYPE a0,DATATYPE a0__2,DATATYPE a1,DATATYPE a1__2,DATATYPE a2,DATATYPE a2__2,DATATYPE a3,DATATYPE a3__2, /*outputs*/ DATATYPE* b0,DATATYPE* b0__2,DATATYPE* b1,DATATYPE* b1__2,DATATYPE* b2,DATATYPE* b2__2,DATATYPE* b3,DATATYPE* b3__2) {
  
  // Variables declaration
  DATATYPE t1;
  DATATYPE t11;
  DATATYPE t11__2;
  DATATYPE t1__2;
  DATATYPE t2;
  DATATYPE t2__2;
  DATATYPE t3;
  DATATYPE t3__2;
  DATATYPE t5;
  DATATYPE t5__2;
  DATATYPE t6;
  DATATYPE t6__2;
  DATATYPE t8;
  DATATYPE t8__2;
  DATATYPE t9;
  DATATYPE t9__2;

  // Instructions (body)
  t1 = NOT(a1);
  t1__2 = NOT(a1__2);
  t3 = XOR(a2,a3);
  t3__2 = XOR(a2__2,a3__2);
  t8 = XOR(a1,a2);
  t8__2 = XOR(a1__2,a2__2);
  t2 = AND(a0,t1);
  t5 = OR(a3,t1);
  t2__2 = AND(a0__2,t1__2);
  t5__2 = OR(a3__2,t1__2);
  *b0 = XOR(t2,t3);
  t6 = XOR(a0,t5);
  *b0__2 = XOR(t2__2,t3__2);
  t6__2 = XOR(a0__2,t5__2);
  t11 = OR(*b0,t8);
  *b1 = XOR(a2,t6);
  t9 = AND(t3,t6);
  t11__2 = OR(*b0__2,t8__2);
  *b1__2 = XOR(a2__2,t6__2);
  t9__2 = AND(t3__2,t6__2);
  *b2 = XOR(t6,t11);
  *b3 = XOR(t8,t9);
  *b2__2 = XOR(t6__2,t11__2);
  *b3__2 = XOR(t8__2,t9__2);

}

  
/* main function */
void RectangleGP__ (/*inputs*/ unsigned char* plain, unsigned char* plain2, unsigned char key[208], /*outputs*/ unsigned char* cipher, unsigned char* cipher2) {

  short* plain__     = (short*)plain;
  short* plain____2  = (short*)plain2;
  short* key__       = (short*)key;
  short* cipher__    = (short*)cipher;
  short* cipher____2 = (short*)cipher2;
  
  // Variables declaration
  DATATYPE _tmp1_[4];
  DATATYPE _tmp1___2[4];
  DATATYPE tmp__[4];
  DATATYPE tmp____2[4];

  // Instructions (body)
  tmp__[0] = plain__[0];
  tmp__[1] = plain__[1];
  tmp____2[0] = plain____2[0];
  tmp____2[1] = plain____2[1];
  tmp__[2] = plain__[2];
  tmp__[3] = plain__[3];
  tmp____2[2] = plain____2[2];
  tmp____2[3] = plain____2[3];
  for (int i = 0; i <= 24; i++) {
    _tmp1_[0] = XOR(tmp__[0],LIFT_16(key__[i*4+0]));
    _tmp1_[1] = XOR(tmp__[1],LIFT_16(key__[i*4+1]));
    _tmp1___2[0] = XOR(tmp____2[0],LIFT_16(key__[i*4+0]));
    _tmp1___2[1] = XOR(tmp____2[1],LIFT_16(key__[i*4+1]));
    _tmp1_[2] = XOR(tmp__[2],LIFT_16(key__[i*4+2]));
    _tmp1_[3] = XOR(tmp__[3],LIFT_16(key__[i*4+3]));
    _tmp1___2[2] = XOR(tmp____2[2],LIFT_16(key__[i*4+2]));
    _tmp1___2[3] = XOR(tmp____2[3],LIFT_16(key__[i*4+3]));
    SubColumn__(_tmp1_[0],_tmp1___2[0],_tmp1_[1],_tmp1___2[1],_tmp1_[2],_tmp1___2[2],_tmp1_[3],_tmp1___2[3],&_tmp1_[0],&_tmp1___2[0],&_tmp1_[1],&_tmp1___2[1],&_tmp1_[2],&_tmp1___2[2],&_tmp1_[3],&_tmp1___2[3]);
    tmp__[0] = _tmp1_[0];
    tmp__[1] = L_ROTATE(_tmp1_[1],1,16);
    tmp____2[0] = _tmp1___2[0];
    tmp____2[1] = L_ROTATE(_tmp1___2[1],1,16);
    tmp__[2] = L_ROTATE(_tmp1_[2],12,16);
    tmp__[3] = L_ROTATE(_tmp1_[3],13,16);
    tmp____2[2] = L_ROTATE(_tmp1___2[2],12,16);
    tmp____2[3] = L_ROTATE(_tmp1___2[3],13,16);
  }
  cipher__[0] = XOR(tmp__[0],LIFT_16(key__[25*4+0]));
  cipher__[1] = XOR(tmp__[1],LIFT_16(key__[25*4+1]));
  cipher____2[0] = XOR(tmp____2[0],LIFT_16(key__[25*4+0]));
  cipher____2[1] = XOR(tmp____2[1],LIFT_16(key__[25*4+1]));
  cipher__[2] = XOR(tmp__[2],LIFT_16(key__[25*4+2]));
  cipher__[3] = XOR(tmp__[3],LIFT_16(key__[25*4+3]));
  cipher____2[2] = XOR(tmp____2[2],LIFT_16(key__[25*4+2]));
  cipher____2[3] = XOR(tmp____2[3],LIFT_16(key__[25*4+3]));

}


/* **************************************************************** */
/*                            Usuba source                          */
/*                                                                  */
/*

_no_inline table SubColumn(input :  u16x4 :: base)
  returns out :  u16x4 :: base
{
  6, 5, 12, 10, 1, 14, 7, 9, 11, 0, 3, 13, 8, 15, 4, 2
}


 node ShiftRows(input :  u16x4 :: base)
  returns out :  u16x4 :: base
vars

let
  (out[0]) = input[0];
  (out[1]) = (input[1] <<< 1);
  (out[2]) = (input[2] <<< 12);
  (out[3]) = (input[3] <<< 13)
tel

 node Rectangle(plain :  u16x4 :: base,key : const u16x4[26] :: base)
  returns cipher :  u16x4 :: base
vars
  tmp :  u16x4[26] :: base
let
  (tmp[0]) = plain;
  _no_unroll forall i in [0,24] {
    (tmp[(i + 1)]) = ShiftRows(SubColumn((tmp[i] ^ key[i])))
  };
  (cipher) = (tmp[25] ^ key[25])
tel

*/
 
