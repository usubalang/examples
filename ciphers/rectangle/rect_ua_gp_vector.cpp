/* This code was generated by Usuba.
   See https://github.com/DadaIsCrazy/usuba. */


/* Do NOT change the order of those define/include */
#define NO_RUNTIME
#ifndef BITS_PER_REG
#define BITS_PER_REG 16
#endif

#define DATATYPE short

/* including the architecture specific .h */
#include "STD.h"
#include <stdio.h>
#include <stdlib.h>

/* auxiliary functions */
void SubColumn__ (/*inputs*/ DATATYPE a0,DATATYPE a1,DATATYPE a2,DATATYPE a3, /*outputs*/ DATATYPE* b0,DATATYPE* b1,DATATYPE* b2,DATATYPE* b3) {
  
  // Variables declaration
  DATATYPE t1;
  DATATYPE t11;
  DATATYPE t2;
  DATATYPE t3;
  DATATYPE t5;
  DATATYPE t6;
  DATATYPE t8;
  DATATYPE t9;


  // Instructions (body)
  t1 = NOT(a1);
  t3 = XOR(a2,a3);
  t8 = XOR(a1,a2);
  t2 = AND(a0,t1);
  t5 = OR(a3,t1);
  *b0 = XOR(t2,t3);
  t6 = XOR(a0,t5);
  t11 = OR(*b0,t8);
  *b1 = XOR(a2,t6);
  t9 = AND(t3,t6);
  *b2 = XOR(t6,t11);
  *b3 = XOR(t8,t9);

}

/* main function */
void RectangleGP__ (/*inputs*/ unsigned char plain[8],unsigned char key[208], /*outputs*/ unsigned char cipher[8]) {

  short* plain__  = (short*)plain;
  short* key__    = (short*)key;
  short* cipher__ = (short*)cipher;
  
  // Variables declaration
  DATATYPE _tmp1_[4];
  DATATYPE _tmp2_[4];
  DATATYPE tmp__[4];


  // Instructions (body)
  tmp__[0] = plain__[0];
  tmp__[1] = plain__[1];
  tmp__[2] = plain__[2];
  tmp__[3] = plain__[3];
  for (int i = 0; i <= 24; i++) {
    _tmp1_[0] = XOR(tmp__[0],key__[i*4+0]);
    _tmp1_[1] = XOR(tmp__[1],key__[i*4+1]);
    _tmp1_[2] = XOR(tmp__[2],key__[i*4+2]);
    _tmp1_[3] = XOR(tmp__[3],key__[i*4+3]);
    SubColumn__(_tmp1_[0],_tmp1_[1],_tmp1_[2],_tmp1_[3],&_tmp2_[0],&_tmp2_[1],&_tmp2_[2],&_tmp2_[3]);
    tmp__[0] = _tmp2_[0];
    tmp__[1] = L_ROTATE(_tmp2_[1],1,16);
    tmp__[2] = L_ROTATE(_tmp2_[2],12,16);
    tmp__[3] = L_ROTATE(_tmp2_[3],13,16);
  }
  cipher__[0] = XOR(tmp__[0],key__[25*4+0]);
  cipher__[1] = XOR(tmp__[1],key__[25*4+1]);
  cipher__[2] = XOR(tmp__[2],key__[25*4+2]);
  cipher__[3] = XOR(tmp__[3],key__[25*4+3]);

}
 
