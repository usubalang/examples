#pragma vectorization

perm ROT1 (input:u16x1) returns (out:u16x1) {
     12, 13, 14, 15,
      0,  1,  2,  3,
      4,  5,  6,  7,
      8,  9, 10, 11
}

perm ROT3 (input:u16x1) returns (out:u16x1) {
      4,  5,  6,  7,
      8,  9, 10, 11,
     12, 13, 14, 15,
      0,  1,  2,  3
}

node MixColumn (a:u16x8) returns (b:u16x8)
vars
    s0_01 : u16, s1_01 : u16, s2_01 : u16, s3_01 : u16,
    s4_01 : u16, s5_01 : u16, s6_01 : u16, s7_01 : u16,
    s0_123 : u16, s1_123 : u16, s2_123 : u16, s3_123 : u16,
    s4_123 : u16, s5_123 : u16, s6_123 : u16, s7_123 : u16
let
    s0_01 = a[0] ^ ROT1(a[0]); s0_123 = ROT1(s0_01) ^ ROT3(a[0]);
    s1_01 = a[1] ^ ROT1(a[1]); s1_123 = ROT1(s1_01) ^ ROT3(a[1]);
    s2_01 = a[2] ^ ROT1(a[2]); s2_123 = ROT1(s2_01) ^ ROT3(a[2]);
    s3_01 = a[3] ^ ROT1(a[3]); s3_123 = ROT1(s3_01) ^ ROT3(a[3]);
    s4_01 = a[4] ^ ROT1(a[4]); s4_123 = ROT1(s4_01) ^ ROT3(a[4]);
    s5_01 = a[5] ^ ROT1(a[5]); s5_123 = ROT1(s5_01) ^ ROT3(a[5]);
    s6_01 = a[6] ^ ROT1(a[6]); s6_123 = ROT1(s6_01) ^ ROT3(a[6]);
    s7_01 = a[7] ^ ROT1(a[7]); s7_123 = ROT1(s7_01) ^ ROT3(a[7]);
    b[0] = s7_01 ^ s0_123;
    b[1] = s7_01 ^ s0_01 ^ s1_123;
    b[2] = s1_01 ^ s2_123;
    b[3] = s7_01 ^ s2_01 ^ s3_123;
    b[4] = s7_01 ^ s3_01 ^ s4_123;
    b[5] = s4_01 ^ s5_123;
    b[6] = s5_01 ^ s6_123;
    b[7] = s6_01 ^ s7_123
tel