

_no_inline table sbox (input:u8) returns (output:u8) {
    99, 124, 119, 123, 242, 107, 111, 197, 48, 1, 103, 43, 254, 215, 171, 118,
    202, 130, 201, 125, 250, 89, 71, 240, 173, 212, 162, 175, 156, 164, 114, 192,
    183, 253, 147, 38, 54, 63, 247, 204, 52, 165, 229, 241, 113, 216, 49, 21,
    4, 199, 35, 195, 24, 150, 5, 154, 7, 18, 128, 226, 235, 39, 178, 117,
    9, 131, 44, 26, 27, 110, 90, 160, 82, 59, 214, 179, 41, 227, 47, 132,
    83, 209, 0, 237, 32, 252, 177, 91, 106, 203, 190, 57, 74, 76, 88, 207,
    208, 239, 170, 251, 67, 77, 51, 133, 69, 249, 2, 127, 80, 60, 159, 168,
    81, 163, 64, 143, 146, 157, 56, 245, 188, 182, 218, 33, 16, 255, 243, 210,
    205, 12, 19, 236, 95, 151, 68, 23, 196, 167, 126, 61, 100, 93, 25, 115,
    96, 129, 79, 220, 34, 42, 144, 136, 70, 238, 184, 20, 222, 94, 11, 219,
    224, 50, 58, 10, 73, 6, 36, 92, 194, 211, 172, 98, 145, 149, 228, 121,
    231, 200, 55, 109, 141, 213, 78, 169, 108, 86, 244, 234, 101, 122, 174, 8,
    186, 120, 37, 46, 28, 166, 180, 198, 232, 221, 116, 31, 75, 189, 139, 138,
    112, 62, 181, 102, 72, 3, 246, 14, 97, 53, 87, 185, 134, 193, 29, 158,
    225, 248, 152, 17, 105, 217, 142, 148, 155, 30, 135, 233, 206, 85, 40, 223,
    140, 161, 137, 13, 191, 230, 66, 104, 65, 153, 45, 15, 176, 84, 187, 22
}

node SubWord (i:u32) returns (o:u32)
let
    forall i in [0, 3] { o[i*8 .. (i+1)*8-1] = sbox(i[i*8 .. (i+1)*8-1]) }
tel

node RotWord (i:u32) returns (o:u32)
let
    o = (i[8 .. 31], i[0 .. 7])
tel

node KeySched (K:u32[4]) returns (W:u32[11*4])
vars
    rcon : u32[11]
let
    rcon = ((1,0,0,0,1,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),  # 0x8d
            (0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),  # 0x01
            (0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),  # 0x02
            (0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),  # 0x08
            (0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),  # 0x08
            (0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),  # 0x10
            (0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),  # 0x20
            (0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),  # 0x40
            (1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),  # 0x80
            (0,0,0,1,1,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),  # 0x1b
            (0,0,1,1,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)); # 0x36
            
    forall i in [0, 3]  { W[i]   = K[i] }
    forall i in [1, 10] { W[i*4] = W[i*4-4] ^ RotWord(SubWord(W[i*4-1])) ^ rcon[i] }
    forall i in [1, 10] {
      W[i*4+1] = W[i*4-4+1] ^ W[i*4-1+1];
      W[i*4+2] = W[i*4-4+2] ^ W[i*4-1+2];
      W[i*4+3] = W[i*4-4+3] ^ W[i*4-1+3]
    }
tel

__END__

node rotate (i:u32) returns (o:u32)
let
    o = (i[8 .. 31], i[0 .. 7])
tel

node sched_core (input:u8[4], i:nat) returns (out:u8[4])
vars
    rcon : u8[11],
    in_r : u8[4],
    tmp  : u8[4]
let    
    rcon = ((1,0,0,0,1,1,0,1),  # 0x8d
            (0,0,0,0,0,0,0,1),  # 0x01
            (0,0,0,0,0,0,1,0),  # 0x02
            (0,0,0,0,0,1,0,0),  # 0x08
            (0,0,0,0,1,0,0,0),  # 0x08
            (0,0,0,1,0,0,0,0),  # 0x10
            (0,0,1,0,0,0,0,0),  # 0x20
            (0,1,0,0,0,0,0,0),  # 0x40
            (1,0,0,0,0,0,0,0),  # 0x80
            (0,0,0,1,1,0,1,1),  # 0x1b
            (0,0,1,1,0,1,1,0)); # 0x36
    in_r = rotate(input);
    forall i in [0, 3] {
        tmp[i] = sbox(in_r[i])
    }
    out = (tmp[0] ^ rcon[i], tmp[1,2,3])
tel

node key_sched (input:u8[16]) returns (key:u8[176])
vars
    tmp : u8[4]
let
    key[0..15] = input;

    forall i in [1, 10] {

        # Note: due to a bug in 'expand_array.ml', can't use key[c-3 .. c].
        tmp := sched_core(key[(16 + (i-1)*4)-3,(16 + (i-1)*4)-2,(16 + (i-1)*4)-1,(16 + (i-1)*4)], i);

        forall k in [0, 3] {
            key[(16 + (i-1)*4)+k] = key[(16 + (i-1)*4)+k-16] ^ tmp[k]
        }

        forall k in [0, 4] {
            key[(16 + (i-1)*4 + 4)+k] = key[(16 + (i-1)*4 + 4)+k-16] ^ tmp[k]
        }
        forall k in [0, 4] {
            key[(16 + (i-1)*4 + 8)+k] = key[(16 + (i-1)*4 + 8)+k-16] ^ tmp[k]
        }
        forall k in [0, 4] {
            key[(16 + (i-1)*4 + 12)+k] = key[(16 + (i-1)*4 + 12)+k-16] ^ tmp[k]
        }

    }
tel    